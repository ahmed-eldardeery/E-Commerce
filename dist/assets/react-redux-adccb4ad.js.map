{"version":3,"file":"react-redux-adccb4ad.js","sources":["../../node_modules/react-redux/es/utils/batch.js","../../node_modules/react-redux/es/components/Context.js","../../node_modules/react-redux/es/hooks/useReduxContext.js","../../node_modules/react-redux/es/utils/useSyncExternalStore.js","../../node_modules/react-redux/es/hooks/useSelector.js","../../node_modules/react-redux/es/utils/Subscription.js","../../node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js","../../node_modules/react-redux/es/components/Provider.js","../../node_modules/react-redux/es/hooks/useStore.js","../../node_modules/react-redux/es/hooks/useDispatch.js","../../node_modules/react-redux/es/index.js"],"sourcesContent":["// Default to a dummy \"batch\" implementation that just runs the callback\nfunction defaultNoopBatch(callback) {\n  callback();\n}\n\nlet batch = defaultNoopBatch; // Allow injecting another batching function later\n\nexport const setBatch = newBatch => batch = newBatch; // Supply a getter just to skip dealing with ESM bindings\n\nexport const getBatch = () => batch;","import { createContext } from 'react';\nexport const ReactReduxContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactReduxContext.displayName = 'ReactRedux';\n}\n\nexport default ReactReduxContext;","import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\n\n/**\r\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @returns {any} the value of the `ReactReduxContext`\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useReduxContext } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const { store } = useReduxContext()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\nexport function useReduxContext() {\n  const contextValue = useContext(ReactReduxContext);\n\n  if (process.env.NODE_ENV !== 'production' && !contextValue) {\n    throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');\n  }\n\n  return contextValue;\n}","export const notInitialized = () => {\n  throw new Error('uSES not initialized!');\n};","import { useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : () => useContext(context);\n  return function useSelector(selector, equalityFn = refEquality) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState\n    } = useReduxContext();\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, selector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();","import { getBatch } from './batch'; // encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nfunction createListenerCollection() {\n  const batch = getBatch();\n  let first = null;\n  let last = null;\n  return {\n    clear() {\n      first = null;\n      last = null;\n    },\n\n    notify() {\n      batch(() => {\n        let listener = first;\n\n        while (listener) {\n          listener.callback();\n          listener = listener.next;\n        }\n      });\n    },\n\n    get() {\n      let listeners = [];\n      let listener = first;\n\n      while (listener) {\n        listeners.push(listener);\n        listener = listener.next;\n      }\n\n      return listeners;\n    },\n\n    subscribe(callback) {\n      let isSubscribed = true;\n      let listener = last = {\n        callback,\n        next: null,\n        prev: last\n      };\n\n      if (listener.prev) {\n        listener.prev.next = listener;\n      } else {\n        first = listener;\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return;\n        isSubscribed = false;\n\n        if (listener.next) {\n          listener.next.prev = listener.prev;\n        } else {\n          last = listener.prev;\n        }\n\n        if (listener.prev) {\n          listener.prev.next = listener.next;\n        } else {\n          first = listener.next;\n        }\n      };\n    }\n\n  };\n}\n\nconst nullListeners = {\n  notify() {},\n\n  get: () => []\n};\nexport function createSubscription(store, parentSub) {\n  let unsubscribe;\n  let listeners = nullListeners;\n\n  function addNestedSub(listener) {\n    trySubscribe();\n    return listeners.subscribe(listener);\n  }\n\n  function notifyNestedSubs() {\n    listeners.notify();\n  }\n\n  function handleChangeWrapper() {\n    if (subscription.onStateChange) {\n      subscription.onStateChange();\n    }\n  }\n\n  function isSubscribed() {\n    return Boolean(unsubscribe);\n  }\n\n  function trySubscribe() {\n    if (!unsubscribe) {\n      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);\n      listeners = createListenerCollection();\n    }\n  }\n\n  function tryUnsubscribe() {\n    if (unsubscribe) {\n      unsubscribe();\n      unsubscribe = undefined;\n      listeners.clear();\n      listeners = nullListeners;\n    }\n  }\n\n  const subscription = {\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe,\n    tryUnsubscribe,\n    getListeners: () => listeners\n  };\n  return subscription;\n}","import { useEffect, useLayoutEffect } from 'react'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n// Matches logic in React's `shared/ExecutionEnvironment` file\n\nexport const canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');\nexport const useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;","import React, { useMemo } from 'react';\nimport { ReactReduxContext } from './Context';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\n\nfunction Provider({\n  store,\n  context,\n  children,\n  serverState\n}) {\n  const contextValue = useMemo(() => {\n    const subscription = createSubscription(store);\n    return {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : undefined\n    };\n  }, [store, serverState]);\n  const previousState = useMemo(() => store.getState(), [store]);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      subscription\n    } = contextValue;\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return () => {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = undefined;\n    };\n  }, [contextValue, previousState]);\n  const Context = context || ReactReduxContext; // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype\n\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nexport default Provider;","import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook(context = ReactReduxContext) {\n  const useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : () => useContext(context);\n  return function useStore() {\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();","import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context = ReactReduxContext) {\n  const useStore = // @ts-ignore\n  context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    const store = useStore(); // @ts-ignore\n\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport const useDispatch = /*#__PURE__*/createDispatchHook();","// The primary entry point assumes we're working with standard ReactDOM/RN, but\n// older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).\n// Because of that, the useSyncExternalStore compat shim is needed.\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nimport { unstable_batchedUpdates as batch } from './utils/reactBatchedUpdates';\nimport { setBatch } from './utils/batch';\nimport { initializeUseSelector } from './hooks/useSelector';\nimport { initializeConnect } from './components/connect';\ninitializeUseSelector(useSyncExternalStoreWithSelector);\ninitializeConnect(useSyncExternalStore); // Enable batched updates in our subscriptions for use\n// with standard React renderers (ReactDOM, React Native)\n\nsetBatch(batch);\nexport { batch };\nexport * from './exports';"],"names":["defaultNoopBatch","callback","batch","setBatch","newBatch","getBatch","ReactReduxContext","createContext","useReduxContext","useContext","notInitialized","useSyncExternalStoreWithSelector","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","context","useDefaultReduxContext","selector","equalityFn","store","subscription","getServerState","selectedState","useDebugValue","useSelector","createListenerCollection","first","last","listener","listeners","isSubscribed","nullListeners","createSubscription","parentSub","unsubscribe","addNestedSub","trySubscribe","notifyNestedSubs","handleChangeWrapper","tryUnsubscribe","canUseDOM","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","Provider","children","serverState","contextValue","useMemo","previousState","Context","React","createStoreHook","useStore","createDispatchHook","useDefaultStore","useDispatch"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}